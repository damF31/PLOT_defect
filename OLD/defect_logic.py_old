"""
Logique métier :
- Gère la génération des listes de fichiers à lire (_L_r_k, _i_r_k, _i_r_i)
- Calcule les labels et indices pour chaque courbe selon les options d'affichage
- Fournit les listes d’atomes/sites actifs pour plotter et data_loader
- Désormais : filtre la génération des courbes selon la sélection de l'utilisateur (atomes/sites à tracer)
"""
import tkinter as tk
import config

class DefectLogic:
    def __init__(self, app):
        self.app = app

    def update_site_atom_inputs(self):
        # Génère dynamiquement les champs de saisie pour chaque type (réseau/interstitiel/ajouté)
        self._update_entries(self.app.network_sites_frame, self.app.network_site_entries,
                             self.app.num_network_sites.get(), "Site réseau", config.MAX_SITES, ["Ti", "N"])
        self._update_entries(self.app.network_atoms_frame, self.app.network_atom_entries,
                             self.app.num_network_atoms.get(), "Atome réseau", config.MAX_ATOMS, ["Ti", "N"])
        self._update_entries(self.app.inter_sites_frame, self.app.inter_site_entries,
                             self.app.num_inter_sites.get(), "Site interstitiel", config.MAX_SITES, ["8c"])
        self._update_entries(self.app.added_atoms_frame, self.app.added_atom_entries,
                             self.app.num_added_atoms.get(), "Atome ajouté", config.MAX_ATOMS, ["H"])

    def _update_entries(self, frame, entries, n, label, maxn, defaults):
        for widget in frame.winfo_children():
            widget.destroy()
        entries.clear()
        try:
            n = int(n)
            if n < 0 or n > maxn:
                raise ValueError
        except Exception:
            n = min(maxn, max(0, int(n) if str(n).isdigit() else 1))
        for i in range(n):
            tk.Label(frame, text=f"{label} {i+1} :").grid(row=i, column=0, sticky='e')
            entry = tk.Entry(frame)
            entry.insert(0, defaults[i] if i < len(defaults) else "")
            entry.grid(row=i, column=1, sticky='ew')
            entries.append(entry)
        frame.grid_columnconfigure(1, weight=1)

    def get_active_atoms_sites(self):
        # Retourne les listes d’atomes et de sites actifs selon les cases cochées
        network_atoms = [e.get().strip() for e in self.app.network_atom_entries if e.get().strip()]
        added_atoms = [e.get().strip() for e in self.app.added_atom_entries if e.get().strip()]
        network_sites = [e.get().strip() for e in self.app.network_site_entries if e.get().strip()]
        inter_sites = [e.get().strip() for e in self.app.inter_site_entries if e.get().strip()]
        atoms = []
        sites = []
        if self.app.show_network_atoms.get():
            atoms += network_atoms
        if self.app.show_added_atoms.get():
            atoms += added_atoms
        if True:  # always include network sites for lacunes
            sites += network_sites
        if self.app.show_inter_sites.get():
            sites += inter_sites
        return network_atoms, added_atoms, network_sites, inter_sites, atoms, sites

    def generate_file_list_and_labels(self):
        """
        Retourne une liste (fname, label) pour chaque courbe à afficher,
        en tenant compte de la sélection utilisateur (atomes/sites à tracer).
        Génère aussi bien les lacunes, substitutions (i≠k) et i_r_i sur les sites interstitiels pour les atomes ajoutés.
        """
        base = self.app.system_name.get()
        show_vac = self.app.show_vacancies.get()
        show_sub = self.app.show_substitutions.get()

        network_atoms, added_atoms, network_sites, inter_sites, all_atoms, all_sites = self.get_active_atoms_sites()
        n_net_sites = len(network_sites)
        n_all_atoms = len(all_atoms)
        n_all_sites = len(all_sites)

        # Prise en compte de la sélection utilisateur
        # Si rien n'est sélectionné, on prend tout par défaut (précaution)
        selected_atoms = getattr(self.app, 'selected_atoms', []) or all_atoms
        selected_sites = getattr(self.app, 'selected_sites', []) or all_sites

        file_labels = []

        # Lacunes sur sites réseau : seulement si "vacances" ET "atomes réseau" cochés !
        if show_vac and self.app.show_network_atoms.get():
            for k, site in enumerate(network_sites, 1):
                if site in selected_sites:
                    file_labels.append((f"{base}_L_r_{k}", f"V_{{{site}}}"))

        # Substitutions (i ≠ k) pour tous atomes/sites sélectionnés
        if show_sub and n_all_atoms > 0 and n_all_sites > 0:
            for k in range(1, n_all_sites+1):
                if all_sites[k-1] not in selected_sites:
                    continue
                for i in range(1, n_all_atoms+1):
                    if i != k and all_atoms[i-1] in selected_atoms:
                        file_labels.append((f"{base}_{i}_r_{k}", f"{all_atoms[i-1]}_{{{all_sites[k-1]}}}"))
            # N'ajouter des interstitiels/atomes ajoutés QUE si la case est cochée
            if self.app.show_added_atoms.get() and inter_sites and added_atoms:
                for idx_site, site in enumerate(inter_sites, start=len(network_sites)+1):
                    if site not in selected_sites:
                        continue
                    for idx_atom, atom in enumerate(added_atoms, start=len(network_atoms)+1):
                        if atom in selected_atoms:
                            file_labels.append((f"{base}_{idx_atom}_r_{idx_site}", f"{atom}_{{{site}}}"))
        return file_labels
